// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RemoteFetch.Classes;

namespace RemoteFetch.Migrations
{
    [DbContext(typeof(FetchUnitDbContext))]
    partial class FetchUnitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RemoteFetch.Classes.FetchItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("FetchUnitUnitName")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ItemName")
                        .HasColumnType("text");

                    b.Property<string>("Xpath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FetchUnitUnitName");

                    b.ToTable("FetchItem");
                });

            modelBuilder.Entity("RemoteFetch.Classes.FetchItemValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FetchItemId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<DateTime>("ValueDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FetchItemId");

                    b.ToTable("FetchItemValue");
                });

            modelBuilder.Entity("RemoteFetch.Classes.FetchUnit", b =>
                {
                    b.Property<string>("UnitName")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Schedule")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("UnitName");

                    b.ToTable("FetchUnits");
                });

            modelBuilder.Entity("RemoteFetch.Classes.FetchItem", b =>
                {
                    b.HasOne("RemoteFetch.Classes.FetchUnit", null)
                        .WithMany("FetchItems")
                        .HasForeignKey("FetchUnitUnitName");
                });

            modelBuilder.Entity("RemoteFetch.Classes.FetchItemValue", b =>
                {
                    b.HasOne("RemoteFetch.Classes.FetchItem", null)
                        .WithMany("FetchItemValues")
                        .HasForeignKey("FetchItemId");
                });
#pragma warning restore 612, 618
        }
    }
}
